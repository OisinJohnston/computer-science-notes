{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Computer Science Notes 5th Year Javascript Computational Thinking","title":"Computer Science Notes"},{"location":"#computer-science-notes","text":"","title":"Computer Science Notes"},{"location":"#5th-year","text":"Javascript Computational Thinking","title":"5th Year"},{"location":"computational_thinking/","text":"Computational thinking Computational thinking is a way of approaching problems that is useful in computing Computational Techniques: There are several computational techniques: Pattern Matching Abstraction Decomposition Pattern Matching This entails identifying patterns and recognising when two patterns are similar, When two patterns are similar we can more often than not use the same solution for both. The more patterns we can find the easier and quicker we will be at solving the problem. Abstraction This means removing all unnecessary information about the problem so that only the relevant easpects remain It helps reduce the problem to it's essential features and lead to a slolution that is simpler, more efficient and faster to implement. example: The prompt() function in javascript, you understand what it does and how to use it but you don't need to know what happens to the arguments you pass into it, just what the result will be, these details are abstracted away. Decomposition This is breaking down tasks into a set of smaller and more manageable tasks. Algorithms An algorithm os a specific set of step-by-step rules for solving a problem or completing a task. Each step must be so precisely defines that it can be translated into a programming language and executed by a machine. Algorithms must conform to the following: Have definiteness: each step must be precisely defined and be unambiguous. Computers cannot guess or rely on prior experience so every detail must be accounted for Have one or more inputs and outputs Be finite: must consist of a finite number of steps and terminate. Have ceffectiveness: Alloperations to be performed must be sufficiently basic that they can be done esxactly and in finite length. Have a clear flow of control from beginning to end Common elements of algorithms include: * Data input, * Computation * Sequence * Iteration * And a means to report the output Sequence: The order in which the instructions occur and are processed Selection: Determines which path the program takes when it is running Iteration: Is the repeated execution of a section of code when a program is running Advantages of algorithms: * Easy to understand * An algorithm has a definite procedure * It is not dependent on any progremming language * Every step in an algorithm has its own logical sequence so it is easy to debug. Ways of describing algorithms: * Natural language: Write out or verbally express a list of steps * Flowcharts: draw each step and show the flow of control * Psuedocode: a mix of programming language and everyday language to describe instructions less formally than using a programming language * Using maths. Flowcharts flowcharts are an excellent way of communicating the logic of a program, they are easy and efficient to analyse the problems However they are difficult to draw for large/complex programs, if changes are made the flowchart will need to be redrawn. Rules for creating flowcharts: Flowcharts must have a start and an end All The symbols in a flowchart: A simple flowchart for if statements: A simple flowchart for if-else statements: A simple flowchart for if-elif-elif-else statements: graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!];","title":"Computational thinking"},{"location":"computational_thinking/#computational-thinking","text":"Computational thinking is a way of approaching problems that is useful in computing","title":"Computational thinking"},{"location":"computational_thinking/#computational-techniques","text":"There are several computational techniques: Pattern Matching Abstraction Decomposition","title":"Computational Techniques:"},{"location":"computational_thinking/#pattern-matching","text":"This entails identifying patterns and recognising when two patterns are similar, When two patterns are similar we can more often than not use the same solution for both. The more patterns we can find the easier and quicker we will be at solving the problem.","title":"Pattern Matching"},{"location":"computational_thinking/#abstraction","text":"This means removing all unnecessary information about the problem so that only the relevant easpects remain It helps reduce the problem to it's essential features and lead to a slolution that is simpler, more efficient and faster to implement. example: The prompt() function in javascript, you understand what it does and how to use it but you don't need to know what happens to the arguments you pass into it, just what the result will be, these details are abstracted away.","title":"Abstraction"},{"location":"computational_thinking/#decomposition","text":"This is breaking down tasks into a set of smaller and more manageable tasks.","title":"Decomposition"},{"location":"computational_thinking/#algorithms","text":"An algorithm os a specific set of step-by-step rules for solving a problem or completing a task. Each step must be so precisely defines that it can be translated into a programming language and executed by a machine. Algorithms must conform to the following: Have definiteness: each step must be precisely defined and be unambiguous. Computers cannot guess or rely on prior experience so every detail must be accounted for Have one or more inputs and outputs Be finite: must consist of a finite number of steps and terminate. Have ceffectiveness: Alloperations to be performed must be sufficiently basic that they can be done esxactly and in finite length. Have a clear flow of control from beginning to end Common elements of algorithms include: * Data input, * Computation * Sequence * Iteration * And a means to report the output Sequence: The order in which the instructions occur and are processed Selection: Determines which path the program takes when it is running Iteration: Is the repeated execution of a section of code when a program is running Advantages of algorithms: * Easy to understand * An algorithm has a definite procedure * It is not dependent on any progremming language * Every step in an algorithm has its own logical sequence so it is easy to debug. Ways of describing algorithms: * Natural language: Write out or verbally express a list of steps * Flowcharts: draw each step and show the flow of control * Psuedocode: a mix of programming language and everyday language to describe instructions less formally than using a programming language * Using maths.","title":"Algorithms"},{"location":"computational_thinking/#flowcharts","text":"flowcharts are an excellent way of communicating the logic of a program, they are easy and efficient to analyse the problems However they are difficult to draw for large/complex programs, if changes are made the flowchart will need to be redrawn. Rules for creating flowcharts: Flowcharts must have a start and an end All The symbols in a flowchart: A simple flowchart for if statements: A simple flowchart for if-else statements: A simple flowchart for if-elif-elif-else statements: graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!];","title":"Flowcharts"},{"location":"javascript/","text":"Javascript notes basics operators for loops arrays","title":"Javascript notes"},{"location":"javascript/#javascript-notes","text":"basics operators for loops arrays","title":"Javascript notes"},{"location":"javascript/arrays/","text":"Arrays The array primitive allows you to store a list of primitives in a single variable, It stores a sequential collection of elements. Declaration To declare an array you can use the Array constructor like this: let myArray = new Array ( \"apples\" , \"oranges\" ) or simply use [] : let myArray = [ \"apples\" , \"oranges\" ] it is reccomended that you use [] as it is more consistent across languages and a good idea to gety use to that syntax. Accessing Elements To access elements in an array we use indexing, indexing is when you use [i] (where i is the index) to access a given index in an array, all arrays are 0-indexed in javascript meaning the index of the first element in the array will be 0 . if you try to access an index that does not exist it will return undefined. example: let fruits = [ \"apples\" , \"oranges\" , \"bannanas\" ] console . log ( fruits [ 0 ]) // apples console . log ( fruits [ 1 ]) // oranges console . log ( fruits [ 2 ]) // bannanas console . log ( fruits [ 3 ]) // undefined Changing Elements To change an element in an array simply use the assignment operator = on the accessed element. if the element does not exist it will add the element to the array and fill the neccessary elements with undefined. example: let people = [ \"Bob\" , \"Daniel\" , Dylan ] people [ 3 ] = \"Robert\" console . log ( people ) // Bob,Daniel,Dylan,Robert people [ 8 ] = \"Gary\" console . log ( people ) // Bob,Daniel,Dylan,Robert,,,,,Gary Appending Elements use the push method to append an element to the end of the array let array = [ \"Bob\" , \"Dylan\" ] array . append ( \"Gerome\" ) console . log ( array ) // Bob,Dylan,Gerome Looping Elements You can use a for loop to loop over the elements in an array. simply loop over all the indices and then access the elements in the array example: let pets = [ \"cat\" , \"dog\" , \"hamster\" ] for ( let i = 0 ; i < pets . length ; i ++ ) { console . log ( pets [ i ]) } /* Output: * cat * dog * hamster */ you can also use this to assign elements to an array example: let numbers = [] for ( let i = 0 ; i < 10 ; i ++ ) { numbers [ i ] = i } console . log ( numbers ) // 0,1,2,...,8,9","title":"Arrays"},{"location":"javascript/arrays/#arrays","text":"The array primitive allows you to store a list of primitives in a single variable, It stores a sequential collection of elements.","title":"Arrays"},{"location":"javascript/arrays/#declaration","text":"To declare an array you can use the Array constructor like this: let myArray = new Array ( \"apples\" , \"oranges\" ) or simply use [] : let myArray = [ \"apples\" , \"oranges\" ] it is reccomended that you use [] as it is more consistent across languages and a good idea to gety use to that syntax.","title":"Declaration"},{"location":"javascript/arrays/#accessing-elements","text":"To access elements in an array we use indexing, indexing is when you use [i] (where i is the index) to access a given index in an array, all arrays are 0-indexed in javascript meaning the index of the first element in the array will be 0 . if you try to access an index that does not exist it will return undefined. example: let fruits = [ \"apples\" , \"oranges\" , \"bannanas\" ] console . log ( fruits [ 0 ]) // apples console . log ( fruits [ 1 ]) // oranges console . log ( fruits [ 2 ]) // bannanas console . log ( fruits [ 3 ]) // undefined","title":"Accessing Elements"},{"location":"javascript/arrays/#changing-elements","text":"To change an element in an array simply use the assignment operator = on the accessed element. if the element does not exist it will add the element to the array and fill the neccessary elements with undefined. example: let people = [ \"Bob\" , \"Daniel\" , Dylan ] people [ 3 ] = \"Robert\" console . log ( people ) // Bob,Daniel,Dylan,Robert people [ 8 ] = \"Gary\" console . log ( people ) // Bob,Daniel,Dylan,Robert,,,,,Gary","title":"Changing Elements"},{"location":"javascript/arrays/#appending-elements","text":"use the push method to append an element to the end of the array let array = [ \"Bob\" , \"Dylan\" ] array . append ( \"Gerome\" ) console . log ( array ) // Bob,Dylan,Gerome","title":"Appending Elements"},{"location":"javascript/arrays/#looping-elements","text":"You can use a for loop to loop over the elements in an array. simply loop over all the indices and then access the elements in the array example: let pets = [ \"cat\" , \"dog\" , \"hamster\" ] for ( let i = 0 ; i < pets . length ; i ++ ) { console . log ( pets [ i ]) } /* Output: * cat * dog * hamster */ you can also use this to assign elements to an array example: let numbers = [] for ( let i = 0 ; i < 10 ; i ++ ) { numbers [ i ] = i } console . log ( numbers ) // 0,1,2,...,8,9","title":"Looping Elements"},{"location":"javascript/arrays/exercises/","text":"Array Exercise Instructions Create an empty array, Add some elements too it From there complete the following: Exercise 1: Write a program to print the elements of the array let array = [] array . push ( - 2 , - 1 , 0 , 1 , 2 , 3 , 4 ) for ( let i = 0 ; i < array . length ; i ++ ) console . log ( array [ i ]) Exercise 2: Write a program to print all the negative elements in the array let array = [] array . push ( - 2 , - 1 , 0 , 1 , 2 , 3 , 4 ) for ( let i = 0 ; i < array . length ; i ++ ) { if ( array [ i ] < 0 ) { console . log ( array [ i ]) } } Exercise 3: Write a program to find the sum of all the elements in an array let array = []; array . push ( - 2 , - 1 , 0 , 1 , 2 , 3 , 4 ); let total = 0 ; for ( let i = 0 ; i < array . length ; i ++ ) { total += array [ i ] } console . log ( total ) Exercise 4: Write a program to find the max and min elements let array = []; array . push ( - 2 , - 1 , 0 , 1 , 2 , 3 , 4 ); let max = array [ 0 ] let min = array [ 0 ] for ( let i = 0 ; i < array . length ; i ++ ) { if ( array [ i ] > max ) { max = array [ i ] } if ( array [ i ] < min ) { min = array [ i ] } } console . log ( \"min: \" + min ) console . log ( \"max:\" + max ) Exercise 5: Write a program to find the second largest element in an array example: let array = []; array . push ( - 2 , - 1 , 0 , 1 , 2 , 3 , 4 ); let max = array [ 0 ] let answer = array [ 0 ] for ( let i = 0 ; i < array . length ; i ++ ) { if ( array [ i ] > max ) { answer = max max = array [ i ] } } console . log ( answer ) Exercise 6 Write a program to count the total number of even and odd elements in the array let array = []; array . push ( - 2 , - 1 , 0 , 1 , 2 , 3 , 4 ); let odd = 0 let even = 0 for ( let i = 0 ; i < array . length ; i ++ ) { if ( array [ i ] % 2 == 0 ) even += 1 ; else odd += 1 } console . log ( \"even: \" + even ) console . log ( \"odd: \" + odd ) Exercise 7 Write a program to copy all elements from an array to another array. let array = []; array . push ( - 2 , - 1 , 0 , 1 , 2 , 3 , 4 ); let newarray = [... array ] Exercise 8 Write a program to add an element to the end of an array let array = [ - 2 , - 1 , 0 , 1 , 2 , 3 , 4 ]; array . push ( 5 ); console . log ( array ) Exercise 9 Write a program to delete an element from the end of an array let array = [ - 1 , 0 , 2 , 3 , 4 , 5 ] array . pop () console . log ( array ) Additional Exercises Exercise 1: Remove all the duplicates from an array by copying unique values to a new array myArray = [ 0 , 1 , 1 , 2 , 3 , 4 , 543 , 243 , 543 , 0 , 1 , 1 , 2 ] result = [] for ( i = 0 ; i < myArray . length ; i ++ ) { if ( result . includes ( myArray [ i ])) { continue } result . push ( myArray [ i ]) } console . log ( result )","title":"Array Exercise"},{"location":"javascript/arrays/exercises/#array-exercise","text":"","title":"Array Exercise"},{"location":"javascript/arrays/exercises/#instructions","text":"Create an empty array, Add some elements too it From there complete the following:","title":"Instructions"},{"location":"javascript/arrays/exercises/#exercise-1","text":"Write a program to print the elements of the array let array = [] array . push ( - 2 , - 1 , 0 , 1 , 2 , 3 , 4 ) for ( let i = 0 ; i < array . length ; i ++ ) console . log ( array [ i ])","title":"Exercise 1:"},{"location":"javascript/arrays/exercises/#exercise-2","text":"Write a program to print all the negative elements in the array let array = [] array . push ( - 2 , - 1 , 0 , 1 , 2 , 3 , 4 ) for ( let i = 0 ; i < array . length ; i ++ ) { if ( array [ i ] < 0 ) { console . log ( array [ i ]) } }","title":"Exercise 2:"},{"location":"javascript/arrays/exercises/#exercise-3","text":"Write a program to find the sum of all the elements in an array let array = []; array . push ( - 2 , - 1 , 0 , 1 , 2 , 3 , 4 ); let total = 0 ; for ( let i = 0 ; i < array . length ; i ++ ) { total += array [ i ] } console . log ( total )","title":"Exercise 3:"},{"location":"javascript/arrays/exercises/#exercise-4","text":"Write a program to find the max and min elements let array = []; array . push ( - 2 , - 1 , 0 , 1 , 2 , 3 , 4 ); let max = array [ 0 ] let min = array [ 0 ] for ( let i = 0 ; i < array . length ; i ++ ) { if ( array [ i ] > max ) { max = array [ i ] } if ( array [ i ] < min ) { min = array [ i ] } } console . log ( \"min: \" + min ) console . log ( \"max:\" + max )","title":"Exercise 4:"},{"location":"javascript/arrays/exercises/#exercise-5","text":"Write a program to find the second largest element in an array example: let array = []; array . push ( - 2 , - 1 , 0 , 1 , 2 , 3 , 4 ); let max = array [ 0 ] let answer = array [ 0 ] for ( let i = 0 ; i < array . length ; i ++ ) { if ( array [ i ] > max ) { answer = max max = array [ i ] } } console . log ( answer )","title":"Exercise 5:"},{"location":"javascript/arrays/exercises/#exercise-6","text":"Write a program to count the total number of even and odd elements in the array let array = []; array . push ( - 2 , - 1 , 0 , 1 , 2 , 3 , 4 ); let odd = 0 let even = 0 for ( let i = 0 ; i < array . length ; i ++ ) { if ( array [ i ] % 2 == 0 ) even += 1 ; else odd += 1 } console . log ( \"even: \" + even ) console . log ( \"odd: \" + odd )","title":"Exercise 6"},{"location":"javascript/arrays/exercises/#exercise-7","text":"Write a program to copy all elements from an array to another array. let array = []; array . push ( - 2 , - 1 , 0 , 1 , 2 , 3 , 4 ); let newarray = [... array ]","title":"Exercise 7"},{"location":"javascript/arrays/exercises/#exercise-8","text":"Write a program to add an element to the end of an array let array = [ - 2 , - 1 , 0 , 1 , 2 , 3 , 4 ]; array . push ( 5 ); console . log ( array )","title":"Exercise 8"},{"location":"javascript/arrays/exercises/#exercise-9","text":"Write a program to delete an element from the end of an array let array = [ - 1 , 0 , 2 , 3 , 4 , 5 ] array . pop () console . log ( array )","title":"Exercise 9"},{"location":"javascript/arrays/exercises/#additional-exercises","text":"","title":"Additional Exercises"},{"location":"javascript/arrays/exercises/#exercise-1_1","text":"Remove all the duplicates from an array by copying unique values to a new array myArray = [ 0 , 1 , 1 , 2 , 3 , 4 , 543 , 243 , 543 , 0 , 1 , 1 , 2 ] result = [] for ( i = 0 ; i < myArray . length ; i ++ ) { if ( result . includes ( myArray [ i ])) { continue } result . push ( myArray [ i ]) } console . log ( result )","title":"Exercise 1:"},{"location":"javascript/basics/","text":"Javascript Basics Contents Comments Variables Constants Datatypes Comments NB: You will be marked on your comments in the leaving cert Comments are a way of describing your code without the machine executing it Comments can be divided into two types: Single-line: Single line comments can only span across one line and are denoted by a // example: // This is a single line comment Single line comments can also be written after code example: console . log ( \"Hello, World!\" ); // a single-line comment after some code Multi-line Multi line comments can span across multiple lines and start with a /* and end with a */ example: /* This is a multi-line comment */ They can also go after code console . log ( \"Hello, World!\" ); /* A multi-line comment after some code */ Variables A variable is a box in which data can be stored, they can be initialised with and without data. There are two ways to declare variables in javascript using the var keyword and the let keyword. All variable names in javascript must begin with a letter or an underscore, you cannot name a variable that starts with a number. You also may not use a reserved word as a variable. A list of resereved words can be found here It is best practice to define variables in camelCase, by capitalising the second letter of each word The var keyword defines a variable in the current scope, but we needn't worry about that now. using var with no initial value var variableName ; using var with an initial value var variableName = 10 ; The let keyword defines a variable in the global scope, again don't worry about that now. using let with no initial value let variableName ; using let with an initial value let variableName = 10 ; Constants A constant is like a variable except for the fact it cannot be changed. constants are declared using the const keyword. It is best practice to define your constants in UPPER_SNAKE_CASE, using uppercase and seperating words with _ 's example: const CONSTANT_NAME = 10 ; Datatypes All datatypes can be set as the value for a variable or a constant There are 7 primitive data types in Javascript: string number bigint boolean undefined symbol null but for the purposes of berevity I will only talk about: string number boolean the type datatype can be found using the typeof keyword Strings strings are used to store text. they are created by putting the desired value into \" . or by calling the String() constructor. example: var myString = \"This is a string\" console . log ( typeof myString ) // string Numbers numbers are used to store well numbers, you needn't wrap them in anything just leave them as they are. they can also be made by calling the Number() constructor example: var myNumber = 10 console . log ( typeof myNumber ) // number Booleans booleans are used to store true/false data there are only two booleans true and false they are used in if statements and for loops. they can be made using the Boolean() constructor or by using a comparotor like == example: var myBoolean = true console . log ( typeof myBoolean ) // boolean myBoolean = 1 == 2 // false coneole . log ( typeof myBoolean ) // boolean","title":"Javascript Basics"},{"location":"javascript/basics/#javascript-basics","text":"","title":"Javascript Basics"},{"location":"javascript/basics/#contents","text":"Comments Variables Constants Datatypes","title":"Contents"},{"location":"javascript/basics/#comments","text":"NB: You will be marked on your comments in the leaving cert Comments are a way of describing your code without the machine executing it Comments can be divided into two types: Single-line: Single line comments can only span across one line and are denoted by a // example: // This is a single line comment Single line comments can also be written after code example: console . log ( \"Hello, World!\" ); // a single-line comment after some code Multi-line Multi line comments can span across multiple lines and start with a /* and end with a */ example: /* This is a multi-line comment */ They can also go after code console . log ( \"Hello, World!\" ); /* A multi-line comment after some code */","title":"Comments"},{"location":"javascript/basics/#variables","text":"A variable is a box in which data can be stored, they can be initialised with and without data. There are two ways to declare variables in javascript using the var keyword and the let keyword. All variable names in javascript must begin with a letter or an underscore, you cannot name a variable that starts with a number. You also may not use a reserved word as a variable. A list of resereved words can be found here It is best practice to define variables in camelCase, by capitalising the second letter of each word The var keyword defines a variable in the current scope, but we needn't worry about that now. using var with no initial value var variableName ; using var with an initial value var variableName = 10 ; The let keyword defines a variable in the global scope, again don't worry about that now. using let with no initial value let variableName ; using let with an initial value let variableName = 10 ;","title":"Variables"},{"location":"javascript/basics/#constants","text":"A constant is like a variable except for the fact it cannot be changed. constants are declared using the const keyword. It is best practice to define your constants in UPPER_SNAKE_CASE, using uppercase and seperating words with _ 's example: const CONSTANT_NAME = 10 ;","title":"Constants"},{"location":"javascript/basics/#datatypes","text":"All datatypes can be set as the value for a variable or a constant There are 7 primitive data types in Javascript: string number bigint boolean undefined symbol null but for the purposes of berevity I will only talk about: string number boolean the type datatype can be found using the typeof keyword","title":"Datatypes"},{"location":"javascript/basics/#strings","text":"strings are used to store text. they are created by putting the desired value into \" . or by calling the String() constructor. example: var myString = \"This is a string\" console . log ( typeof myString ) // string","title":"Strings"},{"location":"javascript/basics/#numbers","text":"numbers are used to store well numbers, you needn't wrap them in anything just leave them as they are. they can also be made by calling the Number() constructor example: var myNumber = 10 console . log ( typeof myNumber ) // number","title":"Numbers"},{"location":"javascript/basics/#booleans","text":"booleans are used to store true/false data there are only two booleans true and false they are used in if statements and for loops. they can be made using the Boolean() constructor or by using a comparotor like == example: var myBoolean = true console . log ( typeof myBoolean ) // boolean myBoolean = 1 == 2 // false coneole . log ( typeof myBoolean ) // boolean","title":"Booleans"},{"location":"javascript/for-loops/","text":"For loops Relavent webdocs found here . Syntax: for ( initiator ; test ; incStatement ) { /*Code in here will run if the test condition is true*/ } initiator : this step executes first. it only executes once. you can declare and initialize a loop control variable here. it is optional, but you must end it with a semi-colon. test : if the test condition is true the block of code executes otherwise it does not. incStatement : this step executes at the end of every loop this is also optional but a semi-colon must also be placed at the end. Example: Example of a typical for loop: for ( let i = 0 ; i < 2 ; i ++ ){ console . log ( \"Hello \" , i ) } Example of a for loop without an initiator: let j = 0 ; for (; j < 2 ; j ++ ){ console . log ( \"Hello \" , j ) } Example of a for loop without an initiator or a incStatement: let k = 0 ; for (; k < 2 ;) { console . log ( \"Hello \" , k ) k ++ } NB: this example is the same as the following while loop: let k = 0 ; while ( k < 2 ) { console . log ( \"Hello \" , k ) k ++ } Exercises The exercises can be found here Break statements Break statements are used to exit loops example of a for loop with a break statement console . log ( \"entering loop\" ) for ( h = 0 ; h < 20 ; h ++ ) { if ( h == 5 ) break ; console . log ( h ) } Continue statements continue statements are used to skip the rest of this iteration example of a for loop with a continue statement console . log ( \"entering loop\" ) for ( h = 0 ; h < 20 ; h ++ ) { if ( h == 5 ) continue ; console . log ( h ) }","title":"For loops"},{"location":"javascript/for-loops/#for-loops","text":"Relavent webdocs found here .","title":"For loops"},{"location":"javascript/for-loops/#syntax","text":"for ( initiator ; test ; incStatement ) { /*Code in here will run if the test condition is true*/ } initiator : this step executes first. it only executes once. you can declare and initialize a loop control variable here. it is optional, but you must end it with a semi-colon. test : if the test condition is true the block of code executes otherwise it does not. incStatement : this step executes at the end of every loop this is also optional but a semi-colon must also be placed at the end.","title":"Syntax:"},{"location":"javascript/for-loops/#example","text":"Example of a typical for loop: for ( let i = 0 ; i < 2 ; i ++ ){ console . log ( \"Hello \" , i ) } Example of a for loop without an initiator: let j = 0 ; for (; j < 2 ; j ++ ){ console . log ( \"Hello \" , j ) } Example of a for loop without an initiator or a incStatement: let k = 0 ; for (; k < 2 ;) { console . log ( \"Hello \" , k ) k ++ } NB: this example is the same as the following while loop: let k = 0 ; while ( k < 2 ) { console . log ( \"Hello \" , k ) k ++ }","title":"Example:"},{"location":"javascript/for-loops/#exercises","text":"The exercises can be found here","title":"Exercises"},{"location":"javascript/for-loops/#break-statements","text":"Break statements are used to exit loops example of a for loop with a break statement console . log ( \"entering loop\" ) for ( h = 0 ; h < 20 ; h ++ ) { if ( h == 5 ) break ; console . log ( h ) }","title":"Break statements"},{"location":"javascript/for-loops/#continue-statements","text":"continue statements are used to skip the rest of this iteration example of a for loop with a continue statement console . log ( \"entering loop\" ) for ( h = 0 ; h < 20 ; h ++ ) { if ( h == 5 ) continue ; console . log ( h ) }","title":"Continue statements"},{"location":"javascript/for-loops/exercises/","text":"for loop exercises We were asked to complete the following exercises: Write a for loop to print all odd numbers up to and including n. jump Write a for loop to calculate the factorial of n. jump Write a for loop to allow someone to guess an 8 digit number. jump Write a for loop to find the sum of every number from 1 to n. jump Write a program to count the digits in an integer. jump Exercise 1 Instructions: Write a for loop to print all odd numbers up to and including n Answer: var n = 10 for ( var i = 0 ; i <= n ; i ++ ) { if ( i % 2 != 0 ) { console . log ( i ) } } Exercise 2 Instructions: Write a for loop to calculate the factorial of n Answer: var n = 5 ; var result = 1 ; for ( var i = 1 ; i <= n ; i ++ ) { result *= i ; } console . log ( result ); Exercise 3 Instructions: Write a for loop to allow someone to guess an 8 digit number. They should get four guesses and the program should print \u201cThat is correct\u201d if they enter the correct number and \u201cThat is incorrect\u201d if they enter an incorrect number. The program should stop if the user enters the correct number. Answer: var guesses = 4 ; var number = 12345678 ; for ( i = 1 ; i <= guesses ; i ++ ) { let guess = Number ( prompt ( \"Enter your guess: \" )); if ( guess == number ) { alert ( \"That is correct\" ); break ; } alert ( \"That is incorrect\" ) } Exercise 4 Instructions: Write a for loop to find the sum of every number from 1 to n. Answer: var n = 10 ; var result = 0 ; for ( i = 0 ; i <= n ; i ++ ) { result += i } console . log ( result ) Exercise 5","title":"for loop exercises"},{"location":"javascript/for-loops/exercises/#for-loop-exercises","text":"We were asked to complete the following exercises: Write a for loop to print all odd numbers up to and including n. jump Write a for loop to calculate the factorial of n. jump Write a for loop to allow someone to guess an 8 digit number. jump Write a for loop to find the sum of every number from 1 to n. jump Write a program to count the digits in an integer. jump","title":"for loop exercises"},{"location":"javascript/for-loops/exercises/#exercise-1","text":"Instructions: Write a for loop to print all odd numbers up to and including n Answer: var n = 10 for ( var i = 0 ; i <= n ; i ++ ) { if ( i % 2 != 0 ) { console . log ( i ) } }","title":"Exercise 1"},{"location":"javascript/for-loops/exercises/#exercise-2","text":"Instructions: Write a for loop to calculate the factorial of n Answer: var n = 5 ; var result = 1 ; for ( var i = 1 ; i <= n ; i ++ ) { result *= i ; } console . log ( result );","title":"Exercise 2"},{"location":"javascript/for-loops/exercises/#exercise-3","text":"Instructions: Write a for loop to allow someone to guess an 8 digit number. They should get four guesses and the program should print \u201cThat is correct\u201d if they enter the correct number and \u201cThat is incorrect\u201d if they enter an incorrect number. The program should stop if the user enters the correct number. Answer: var guesses = 4 ; var number = 12345678 ; for ( i = 1 ; i <= guesses ; i ++ ) { let guess = Number ( prompt ( \"Enter your guess: \" )); if ( guess == number ) { alert ( \"That is correct\" ); break ; } alert ( \"That is incorrect\" ) }","title":"Exercise 3"},{"location":"javascript/for-loops/exercises/#exercise-4","text":"Instructions: Write a for loop to find the sum of every number from 1 to n. Answer: var n = 10 ; var result = 0 ; for ( i = 0 ; i <= n ; i ++ ) { result += i } console . log ( result )","title":"Exercise 4"},{"location":"javascript/for-loops/exercises/#exercise-5","text":"","title":"Exercise 5"},{"location":"javascript/operators/","text":"Javascript Operators There are many different types of javascript operators including: math operations assignment operators unary operators comparison operators","title":"Javascript Operators"},{"location":"javascript/operators/#javascript-operators","text":"There are many different types of javascript operators including: math operations assignment operators unary operators comparison operators","title":"Javascript Operators"},{"location":"javascript/operators/assignment-operations/","text":"Assignment Operations Assignment operators assign the resulting values to javascript variables The = operator the simple assignment operator is = it's used to assign a value to a variable example: let x = 10 ; The += operator the += operator adds a given value to a variable let x = 10 ; x += 5 ; // 15 The -= operator The -= operator subtracts a given value from a variable let x = 10 ; x -= 5 ; // 5 The *= operator The *= operator multiplies a given value to a variable let x = 10 ; x *= 10 ; // 100 The /= operator The /= operator divides a given value to a variable let x = 10 ; x /= 5 ; // 2 The **= operator The **= operator puts a given value to the power of a variable let x = 8 ; x **= 2 ; // 64","title":"Assignment Operations"},{"location":"javascript/operators/assignment-operations/#assignment-operations","text":"Assignment operators assign the resulting values to javascript variables","title":"Assignment Operations"},{"location":"javascript/operators/assignment-operations/#the-operator","text":"the simple assignment operator is = it's used to assign a value to a variable example: let x = 10 ;","title":"The = operator"},{"location":"javascript/operators/assignment-operations/#the-operator_1","text":"the += operator adds a given value to a variable let x = 10 ; x += 5 ; // 15","title":"The += operator"},{"location":"javascript/operators/assignment-operations/#the-operator_2","text":"The -= operator subtracts a given value from a variable let x = 10 ; x -= 5 ; // 5","title":"The -= operator"},{"location":"javascript/operators/assignment-operations/#the-operator_3","text":"The *= operator multiplies a given value to a variable let x = 10 ; x *= 10 ; // 100","title":"The *= operator"},{"location":"javascript/operators/assignment-operations/#the-operator_4","text":"The /= operator divides a given value to a variable let x = 10 ; x /= 5 ; // 2","title":"The /= operator"},{"location":"javascript/operators/assignment-operations/#the-operator_5","text":"The **= operator puts a given value to the power of a variable let x = 8 ; x **= 2 ; // 64","title":"The **= operator"},{"location":"javascript/operators/comparison-operations/","text":"Comparison Operations Comparison operators are used to compare two values, they will always return a boolean The equals operator ( == ) The == operator is used to compare the two values on either side of the operator, if they are the same it will return true otherwise it will return false example: var x = 5 == 1 // x = false var y = 5 == 5 // y = true The less than operator ( < ) The < operator will check if the value on the left hand side is less than the value on the right hand side example: var x = 5 < 3 // x = false var y = 3 < 5 // y = true The greater than operator ( > ) The > operator will check if the value on the left hand side is greater than the value on the right hand side example: var x = 5 > 3 // x = true var y = 3 > 5 // y = false The less than or equal too operator ( <= ) The <= operator will check if the value on the left hand side is less than or equal too the value on the right hand side: example: var x = 5 <= 3 // x = false var y = 5 <= 5 // y = true var z = 3 <= 5 // z = true The greater than or equal too operator ( >= ) The >= operator will check if the value on the left hand side is greater than or equal too the value on the right hand side: example var x = 5 >= 3 // x = true var y = 5 >= 5 // x = true var z = 3 >= 5 // x = false","title":"Comparison Operations"},{"location":"javascript/operators/comparison-operations/#comparison-operations","text":"Comparison operators are used to compare two values, they will always return a boolean","title":"Comparison Operations"},{"location":"javascript/operators/comparison-operations/#the-equals-operator","text":"The == operator is used to compare the two values on either side of the operator, if they are the same it will return true otherwise it will return false example: var x = 5 == 1 // x = false var y = 5 == 5 // y = true","title":"The equals operator (==)"},{"location":"javascript/operators/comparison-operations/#the-less-than-operator","text":"The < operator will check if the value on the left hand side is less than the value on the right hand side example: var x = 5 < 3 // x = false var y = 3 < 5 // y = true","title":"The less than operator (&lt;)"},{"location":"javascript/operators/comparison-operations/#the-greater-than-operator","text":"The > operator will check if the value on the left hand side is greater than the value on the right hand side example: var x = 5 > 3 // x = true var y = 3 > 5 // y = false","title":"The greater than operator (&gt;)"},{"location":"javascript/operators/comparison-operations/#the-less-than-or-equal-too-operator","text":"The <= operator will check if the value on the left hand side is less than or equal too the value on the right hand side: example: var x = 5 <= 3 // x = false var y = 5 <= 5 // y = true var z = 3 <= 5 // z = true","title":"The less than or equal too operator (&lt;=)"},{"location":"javascript/operators/comparison-operations/#the-greater-than-or-equal-too-operator","text":"The >= operator will check if the value on the left hand side is greater than or equal too the value on the right hand side: example var x = 5 >= 3 // x = true var y = 5 >= 5 // x = true var z = 3 >= 5 // x = false","title":"The greater than or equal too operator (&gt;=)"},{"location":"javascript/operators/math-operations/","text":"Math Operations Addition Addition is denoted using the operator + example: console . log ( 1 + 2 ) // displays 3 Subtraction Subtraction is denoted using the operator - example: console . log ( 2 - 1 ); // displays 1 Division Division is denoted using the operator / example: console . log ( 10 / 2 ); // displays 5 Multiplication Multiplication is denoted using the operator * example: console . log ( 5 * 10 ); // displays 50 Exponent Exponents are denoted using the operator ** example: console . log ( 5 ** 2 ); // displays 25","title":"Math Operations"},{"location":"javascript/operators/math-operations/#math-operations","text":"","title":"Math Operations"},{"location":"javascript/operators/math-operations/#addition","text":"Addition is denoted using the operator + example: console . log ( 1 + 2 ) // displays 3","title":"Addition"},{"location":"javascript/operators/math-operations/#subtraction","text":"Subtraction is denoted using the operator - example: console . log ( 2 - 1 ); // displays 1","title":"Subtraction"},{"location":"javascript/operators/math-operations/#division","text":"Division is denoted using the operator / example: console . log ( 10 / 2 ); // displays 5","title":"Division"},{"location":"javascript/operators/math-operations/#multiplication","text":"Multiplication is denoted using the operator * example: console . log ( 5 * 10 ); // displays 50","title":"Multiplication"},{"location":"javascript/operators/math-operations/#exponent","text":"Exponents are denoted using the operator ** example: console . log ( 5 ** 2 ); // displays 25","title":"Exponent"},{"location":"javascript/operators/unary-operations/","text":"Unary Operations Unary operators are a bit like assignment operators in that they assign their result to a variable, but unlike assignment operators and other operators they only take in one input, the variable they are going to modify. Note: this is not an extensive list for the purposes of simplicity it only covers the ones we have covered in class, I will update it as we cover more in class Contents Increment Decrement Increment ( ++ ) The increment operator ( ++ ) adds one to it's subject and returns the value It can be put before and after it's subject: After ( x++ ): This returns the value ( x ) and then adds one. Before ( ++x ): This adds one to the variable ( x+1 ) and then returns it. After example: var x = 10 ; // x = 10 var y = x ++ ; // y = 10 and x = 11 y is set to 10 and then one is added to x Before example: var x = 10 ; // x = 10 var y = ++ x ; // x = 11 and y = 11 Decrement ( -- ) The decrement operator ( -- ) removes one from it's subject and returns the value Like the increment operator it can be put before and after it's subject: After ( x-- ): This returns the value ( x ) and then removes one. Before ( --x ): This removes one from the variable ( x-1 ) and then returns it. After example: var x = 10 ; // x = 10 var y = x -- ; // y = 10 and x = 9 Before example: var x = 10 ; // x = 10 var y = -- x ; // y = 9 and x = 9","title":"Unary Operations"},{"location":"javascript/operators/unary-operations/#unary-operations","text":"Unary operators are a bit like assignment operators in that they assign their result to a variable, but unlike assignment operators and other operators they only take in one input, the variable they are going to modify. Note: this is not an extensive list for the purposes of simplicity it only covers the ones we have covered in class, I will update it as we cover more in class","title":"Unary Operations"},{"location":"javascript/operators/unary-operations/#contents","text":"Increment Decrement","title":"Contents"},{"location":"javascript/operators/unary-operations/#increment","text":"The increment operator ( ++ ) adds one to it's subject and returns the value It can be put before and after it's subject: After ( x++ ): This returns the value ( x ) and then adds one. Before ( ++x ): This adds one to the variable ( x+1 ) and then returns it. After example: var x = 10 ; // x = 10 var y = x ++ ; // y = 10 and x = 11 y is set to 10 and then one is added to x Before example: var x = 10 ; // x = 10 var y = ++ x ; // x = 11 and y = 11","title":"Increment (++)"},{"location":"javascript/operators/unary-operations/#decrement-","text":"The decrement operator ( -- ) removes one from it's subject and returns the value Like the increment operator it can be put before and after it's subject: After ( x-- ): This returns the value ( x ) and then removes one. Before ( --x ): This removes one from the variable ( x-1 ) and then returns it. After example: var x = 10 ; // x = 10 var y = x -- ; // y = 10 and x = 9 Before example: var x = 10 ; // x = 10 var y = -- x ; // y = 9 and x = 9","title":"Decrement (--)"}]}