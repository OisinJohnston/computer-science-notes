{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Computer Science Notes 5th Year Javascript","title":"Computer Science Notes"},{"location":"#computer-science-notes","text":"","title":"Computer Science Notes"},{"location":"#5th-year","text":"Javascript","title":"5th Year"},{"location":"javascript/","text":"Javascript notes basics operators for loops","title":"Javascript notes"},{"location":"javascript/#javascript-notes","text":"basics operators for loops","title":"Javascript notes"},{"location":"javascript/basics/","text":"Javascript Basics Contents Comments Variables Constants Datatypes Comments NB: You will be marked on your comments in the leaving cert Comments are a way of describing your code without the machine executing it Comments can be divided into two types: Single-line: Single line comments can only span across one line and are denoted by a // example: // This is a single line comment Single line comments can also be written after code example: console.log(\"Hello, World!\"); // a single-line comment after some code Multi-line Multi line comments can span across multiple lines and start with a /* and end with a */ example: /* This is a multi-line comment */ They can also go after code console.log(\"Hello, World!\"); /* A multi-line comment after some code */ Variables A variable is a box in which data can be stored, they can be initialised with and without data. There are two ways to declare variables in javascript using the var keyword and the let keyword. All variable names in javascript must begin with a letter or an underscore, you cannot name a variable that starts with a number. You also may not use a reserved word as a variable. A list of resereved words can be found here It is best practice to define variables in camelCase, by capitalising the second letter of each word The var keyword defines a variable in the current scope, but we needn't worry about that now. using var with no initial value var variableName; using var with an initial value var variableName = 10; The let keyword defines a variable in the global scope, again don't worry about that now. using let with no initial value let variableName; using let with an initial value let variableName = 10; Constants A constant is like a variable except for the fact it cannot be changed. constants are declared using the const keyword. It is best practice to define your constants in UPPER_SNAKE_CASE, using uppercase and seperating words with _ 's example: const CONSTANT_NAME = 10; Datatypes All datatypes can be set as the value for a variable or a constant There are 7 primitive data types in Javascript: string number bigint boolean undefined symbol null but for the purposes of berevity I will only talk about: string number boolean the type datatype can be found using the typeof keyword Strings strings are used to store text. they are created by putting the desired value into \" . or by calling the String() constructor. example: var myString = \"This is a string\" console.log(typeof myString) // string Numbers numbers are used to store well numbers, you needn't wrap them in anything just leave them as they are. they can also be made by calling the Number() constructor example: var myNumber = 10 console.log(typeof myNumber) // number Booleans booleans are used to store true/false data there are only two booleans true and false they are used in if statements and for loops. they can be made using the Boolean() constructor or by using a comparotor like == example: var myBoolean = true console.log(typeof myBoolean) // boolean myBoolean = 1==2 // false coneole.log(typeof myBoolean) // boolean","title":"Javascript Basics"},{"location":"javascript/basics/#javascript-basics","text":"","title":"Javascript Basics"},{"location":"javascript/basics/#contents","text":"Comments Variables Constants Datatypes","title":"Contents"},{"location":"javascript/basics/#comments","text":"NB: You will be marked on your comments in the leaving cert Comments are a way of describing your code without the machine executing it Comments can be divided into two types: Single-line: Single line comments can only span across one line and are denoted by a // example: // This is a single line comment Single line comments can also be written after code example: console.log(\"Hello, World!\"); // a single-line comment after some code Multi-line Multi line comments can span across multiple lines and start with a /* and end with a */ example: /* This is a multi-line comment */ They can also go after code console.log(\"Hello, World!\"); /* A multi-line comment after some code */","title":"Comments"},{"location":"javascript/basics/#variables","text":"A variable is a box in which data can be stored, they can be initialised with and without data. There are two ways to declare variables in javascript using the var keyword and the let keyword. All variable names in javascript must begin with a letter or an underscore, you cannot name a variable that starts with a number. You also may not use a reserved word as a variable. A list of resereved words can be found here It is best practice to define variables in camelCase, by capitalising the second letter of each word The var keyword defines a variable in the current scope, but we needn't worry about that now. using var with no initial value var variableName; using var with an initial value var variableName = 10; The let keyword defines a variable in the global scope, again don't worry about that now. using let with no initial value let variableName; using let with an initial value let variableName = 10;","title":"Variables"},{"location":"javascript/basics/#constants","text":"A constant is like a variable except for the fact it cannot be changed. constants are declared using the const keyword. It is best practice to define your constants in UPPER_SNAKE_CASE, using uppercase and seperating words with _ 's example: const CONSTANT_NAME = 10;","title":"Constants"},{"location":"javascript/basics/#datatypes","text":"All datatypes can be set as the value for a variable or a constant There are 7 primitive data types in Javascript: string number bigint boolean undefined symbol null but for the purposes of berevity I will only talk about: string number boolean the type datatype can be found using the typeof keyword","title":"Datatypes"},{"location":"javascript/basics/#strings","text":"strings are used to store text. they are created by putting the desired value into \" . or by calling the String() constructor. example: var myString = \"This is a string\" console.log(typeof myString) // string","title":"Strings"},{"location":"javascript/basics/#numbers","text":"numbers are used to store well numbers, you needn't wrap them in anything just leave them as they are. they can also be made by calling the Number() constructor example: var myNumber = 10 console.log(typeof myNumber) // number","title":"Numbers"},{"location":"javascript/basics/#booleans","text":"booleans are used to store true/false data there are only two booleans true and false they are used in if statements and for loops. they can be made using the Boolean() constructor or by using a comparotor like == example: var myBoolean = true console.log(typeof myBoolean) // boolean myBoolean = 1==2 // false coneole.log(typeof myBoolean) // boolean","title":"Booleans"},{"location":"javascript/for-loops/","text":"For loops Relavent webdocs found here . Syntax: for (initiator; test; incStatement) { /*Code in here will run if the test condition is true*/ } initiator : this step executes first. it only executes once. you can declare and initialize a loop control variable here. it is optional, but you must end it with a semi-colon. test : if the test condition is true the block of code executes otherwise it does not. incStatement : this step executes at the end of every loop this is also optional but a semi-colon must also be placed at the end. Example: Example of a typical for loop: for (let i=0; i<2; i++){ console.log(\"Hello \", i) } Example of a for loop without an initiator: let j=0; for (;j<2;j++){ console.log(\"Hello \", j) } Example of a for loop without an initiator or a incStatement: let k=0; for (;k<2;) { console.log(\"Hello \", k) k++ } NB: this example is the same as the following while loop: let k=0; while (k<2) { console.log(\"Hello \", k) k++ } Exercises The exercises can be found here","title":"For loops"},{"location":"javascript/for-loops/#for-loops","text":"Relavent webdocs found here .","title":"For loops"},{"location":"javascript/for-loops/#syntax","text":"for (initiator; test; incStatement) { /*Code in here will run if the test condition is true*/ } initiator : this step executes first. it only executes once. you can declare and initialize a loop control variable here. it is optional, but you must end it with a semi-colon. test : if the test condition is true the block of code executes otherwise it does not. incStatement : this step executes at the end of every loop this is also optional but a semi-colon must also be placed at the end.","title":"Syntax:"},{"location":"javascript/for-loops/#example","text":"Example of a typical for loop: for (let i=0; i<2; i++){ console.log(\"Hello \", i) } Example of a for loop without an initiator: let j=0; for (;j<2;j++){ console.log(\"Hello \", j) } Example of a for loop without an initiator or a incStatement: let k=0; for (;k<2;) { console.log(\"Hello \", k) k++ } NB: this example is the same as the following while loop: let k=0; while (k<2) { console.log(\"Hello \", k) k++ }","title":"Example:"},{"location":"javascript/for-loops/#exercises","text":"The exercises can be found here","title":"Exercises"},{"location":"javascript/for-loops/exercises/","text":"for loop exercises We were asked to complete the following exercises: Write a for loop to print all odd numbers up to and including n. jump Write a for loop to calculate the factorial of n. jump Write a for loop to allow someone to guess an 8 digit number. jump Write a for loop to find the sum of every number from 1 to n. jump Exercise 1 Instructions: Write a for loop to print all odd numbers up to and including n Answer: var n = 10 for (var i = 0; i<=n; i++) { if (i%2!=0) { console.log(i) } } Exercise 2 Instructions: Write a for loop to calculate the factorial of n Answer: var n = 5; var result = 1; for (var i = 1; i<=n; i++) { result *= i; } console.log(result); Exercise 3 Instructions: Write a for loop to allow someone to guess an 8 digit number. They should get four guesses and the program should print \u201cThat is correct\u201d if they enter the correct number and \u201cThat is incorrect\u201d if they enter an incorrect number. The program should stop if the user enters the correct number. Answer: var guesses = 4; var number = 12345678; for (i=1; i<=guesses; i++) { let guess = Number(prompt(\"Enter your guess: \")); if (guess == number) { alert(\"That is correct\"); break; } alert(\"That is incorrect\") } Exercise 4 Instructions: Write a for loop to find the sum of every number from 1 to n. Answer: var n = 10; var result = 0; for (i=0; i<=n; i++) { result += i } console.log(result)","title":"for loop exercises"},{"location":"javascript/for-loops/exercises/#for-loop-exercises","text":"We were asked to complete the following exercises: Write a for loop to print all odd numbers up to and including n. jump Write a for loop to calculate the factorial of n. jump Write a for loop to allow someone to guess an 8 digit number. jump Write a for loop to find the sum of every number from 1 to n. jump","title":"for loop exercises"},{"location":"javascript/for-loops/exercises/#exercise-1","text":"Instructions: Write a for loop to print all odd numbers up to and including n Answer: var n = 10 for (var i = 0; i<=n; i++) { if (i%2!=0) { console.log(i) } }","title":"Exercise 1"},{"location":"javascript/for-loops/exercises/#exercise-2","text":"Instructions: Write a for loop to calculate the factorial of n Answer: var n = 5; var result = 1; for (var i = 1; i<=n; i++) { result *= i; } console.log(result);","title":"Exercise 2"},{"location":"javascript/for-loops/exercises/#exercise-3","text":"Instructions: Write a for loop to allow someone to guess an 8 digit number. They should get four guesses and the program should print \u201cThat is correct\u201d if they enter the correct number and \u201cThat is incorrect\u201d if they enter an incorrect number. The program should stop if the user enters the correct number. Answer: var guesses = 4; var number = 12345678; for (i=1; i<=guesses; i++) { let guess = Number(prompt(\"Enter your guess: \")); if (guess == number) { alert(\"That is correct\"); break; } alert(\"That is incorrect\") }","title":"Exercise 3"},{"location":"javascript/for-loops/exercises/#exercise-4","text":"Instructions: Write a for loop to find the sum of every number from 1 to n. Answer: var n = 10; var result = 0; for (i=0; i<=n; i++) { result += i } console.log(result)","title":"Exercise 4"},{"location":"javascript/operators/","text":"Javascript Operators There are many different types of javascript operators including: math operations assignment operators unary operators comparison operators","title":"Javascript Operators"},{"location":"javascript/operators/#javascript-operators","text":"There are many different types of javascript operators including: math operations assignment operators unary operators comparison operators","title":"Javascript Operators"},{"location":"javascript/operators/comparison-operations/","text":"Comparison operations Comparison operators are used to compare two values, they will always return a boolean The equals operator ( == ) The == operator is used to compare the two values on either side of the operator, if they are the same it will return true otherwise it will return false example: var x = 5==1 // x = false var y = 5==5 // y = true The less than operator ( < ) The < operator will check if the value on the left hand side is less than the value on the right hand side example: var x = 5<3 // x = false var y = 3<5 // y = true The greater than operator ( > ) The > operator will check if the value on the left hand side is greater than the value on the right hand side example: var x = 5>3 // x = true var y = 3>5 // y = false The less than or equal too operator ( <= ) The <= operator will check if the value on the left hand side is less than or equal too the value on the right hand side: example: var x = 5<=3 // x = false var y = 5<=5 // y = true var z = 3<=5 // z = true The greater than or equal too operator ( >= ) The >= operator will check if the value on the left hand side is greater than or equal too the value on the right hand side: example var x = 5>=3 // x = true var y = 5>=5 // x = true var z = 3>=5 // x = false","title":"Comparison operations"},{"location":"javascript/operators/comparison-operations/#comparison-operations","text":"Comparison operators are used to compare two values, they will always return a boolean","title":"Comparison operations"},{"location":"javascript/operators/comparison-operations/#the-equals-operator","text":"The == operator is used to compare the two values on either side of the operator, if they are the same it will return true otherwise it will return false example: var x = 5==1 // x = false var y = 5==5 // y = true","title":"The equals operator (==)"},{"location":"javascript/operators/comparison-operations/#the-less-than-operator","text":"The < operator will check if the value on the left hand side is less than the value on the right hand side example: var x = 5<3 // x = false var y = 3<5 // y = true","title":"The less than operator (&lt;)"},{"location":"javascript/operators/comparison-operations/#the-greater-than-operator","text":"The > operator will check if the value on the left hand side is greater than the value on the right hand side example: var x = 5>3 // x = true var y = 3>5 // y = false","title":"The greater than operator (&gt;)"},{"location":"javascript/operators/comparison-operations/#the-less-than-or-equal-too-operator","text":"The <= operator will check if the value on the left hand side is less than or equal too the value on the right hand side: example: var x = 5<=3 // x = false var y = 5<=5 // y = true var z = 3<=5 // z = true","title":"The less than or equal too operator (&lt;=)"},{"location":"javascript/operators/comparison-operations/#the-greater-than-or-equal-too-operator","text":"The >= operator will check if the value on the left hand side is greater than or equal too the value on the right hand side: example var x = 5>=3 // x = true var y = 5>=5 // x = true var z = 3>=5 // x = false","title":"The greater than or equal too operator (&gt;=)"}]}